package main;

public class Starter {

	public static void main(String[] args) {
		// 스택 : 메소드 호출과 지역변수가 있는곳. 그리고 먼저 들어간 놈이 나중에 나온다.
		// 힙 : 모든 객체가 있는 곳
		
		/*	=======================================================================
			Q1. a.data1의 값은?
			=======================================================================
		*/	
		
//		Test a = new Test();	// new로 선언된 객체는 무조건 힙에 들어간다. Test의 객체 a는 힙에 들어가 있다.
//		a.data1 = 10;			// 힙에 있는 객체 a의 data1에 10을 대입. 지역변수 ⇒ 스택에 들어간다.
//		a.data2 = 20;			// 힙에 있는 객체 a의 data2에 20을 대입. 지역변수 ⇒ 스택에 들어간다.
//		
//		System.out.println(a.data1);
//		System.out.println(a.data2);
//		
//		Test b = a;				// Test의 객체 b. a를 가리키고 있다.
//		b.data1 = 30;			// b의 data1은 곧, 스택에 있는 a.data1이다. 거기에 30을 대입.
//		b.data2 = 40;			// b의 data2은 곧, 스택에 있는 a.data2이다. 거기에 40을 대입.
//		
//		// 스택에 있는 a.data1의 값을, a.data1을 보고 있는 b.data1에다 30을 대입함으로써 30으로 바꾼 것.
//		// 스택에 먼저 10이 들어가고, a를 바라보고 있는 b의 data1에 30을 넣으니까 스택에 30이 들어감.
//		// 스택에 나중에 들어간 30이 먼저 출력된다.
//		System.out.println(a.data1);
//		System.out.println(a.data2);
		
		// 스택 : 메소드 호출과 지역변수가 있는곳. 그리고 먼저 들어간 놈이 나중에 나온다.
		// 힙 : 모든 객체가 있는 곳
		/*	=======================================================================
			Q2. t.data1의 값은?
			=======================================================================
		*/	

		Test t = new Test();				// Test의 객체 t. 이시끼는 힙에 들어간다.
		t.data1 = 10;						// 스택에 10을 집어넣었다.
		t.data2 = 20;						// 스택에 20을 집어넣었다.
		Test t1 = functionTest(t);			// 파라미터에 t를 집어넣고 메소드를 호출.
		
		System.out.println(t.data1);
		System.out.println(t.data2);
	}
	
	static Test functionTest(Test a) {		// 호출된 메소드. 파라미터로 a(객체 t)가 들어왔다. 
		// a로 받은 것 뿐이지 이게 들어갈 때는 t였으니까 결국 영향이 있는 건 t의 data1, data2.
		a.data1 = 30;						// 스택에 30을 집어넣었다.
		a.data2 = 40;						// 스택에 40을 집어넣었다.
		// data1만 가지고 보면, 메소드를 통해서 스택상 10이었던 변수에 30을 집어넣었다.
		// 스택상 10이 먼저 들어가고, 그 다음 30이 들어갔다. 그러니까 출력을 하면 먼저 나와야 되는 30이 출력되는 것.
		// 힙에 있는 t의 data1의 스택에 처음에 10이 들어가고, 휘발성인 메소드(스택)를 통해서 30을 넣었다.
		return a;
	}
	
	// 참고
	// 원시타입 변수 8가지(byte, short, int, long, float, double, char, boolean)
	// 얘네들 이외는 전부 레퍼런스 (참조) 변수다.
	// 참조 변수는 죄다 힙에 들어간다. 그리고 진짜 내용이 저장된다.
	// 스택 메모리에는 간단하게 그 주소만 저장이 된다.
	// 힙 영역에는 실제 변수가 가리키고 있는 값이 저장된다.

}
